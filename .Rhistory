install.packages('RMySQL')
library(RMySQL)
?dbConnect
ucscDB <- dbConnect(MySQL(), user="genome", host = "genome-mysl.cse.ucsc.edu")
ucscDB <- dbConnect(MySQL(), user="genome", host = "genome-mysql.cse.ucsc.edu")
result <- dbGetQuoery(ucscDB,"show databases;")
result <- dbGetQuery(ucscDB,"show databases;")
result
dbDisconnect(ucscDB)
clean <- read.table("Downloads/Cleaned.txt", header=TRUE)
clean
colnames(clean)
names <- colnames(clean)
names
clean <- read.table("Downloads/my_analysis.txt.txt", header=TRUE)
clean <- read.table("Downloads/my_analysis.txt", header=TRUE)
clean
colnames(clean)
?par
?boxplot
library(ggplot2)
data < cars
data <- cars
data
data2 <- mpg
mpg
mpg$manufacturer
unique(mpg$manufacturer)
?mpg
?ggplo2
?ggplot2
?dplyr
??dplyr
library(dplyr)
?dplyr
library(lattice)
library(datasets)
airquality <- transform(airquality, Month = factor(Month))
xyplot(Ozone ~ Wind | Month, data= airquality, layout= c(5,1))
library(nlme)
xyplot(weight ~ Time | Diet. Bodyweight)
xyplot(weight ~ Time | Diet, BodyWeight)
?xyplot
?xyplot
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
?qplot
?geom_smooth
qplot(votes, rating, data = movies) + geom_smooth()
movies
>movies
?movies
library(ggplot2)
?movies
?mpg
mpg
movies
qplot(cyl, displ, data = mpg) + geom_smooth()
qplot(cyl, displ, data = mpg) + stats_smooth("loess")
qplot(cyl, displ, data = mpg, smooth = "loess")
library(ggplot2movies)
?ggplot
g <- ggplot(data = mpg, aes(cyl, displ))
class(g)
g + geom_smooth()
g + geom_points() + geom_smooth()
g + geom_point() + geom_smooth()
str(mpg)
library(swirl)
swirl()
head(airquality)
xyplot(Ozone ~Wind, data = airquality)
xyplot(Ozone ~Wind, data = airquality, col = 'red', pch=8)
xyplot(Ozone ~Wind, data = airquality, col = 'red', pch=8, main = 'Big Apple Data')
xyplot(Ozone ~ Wind, data = airquality, pch=8,col = 'red', main = 'Big Apple Data')
xyplot(Ozone ~ Wind | as.factor(Month), data = airquality, layout = c(5,1))
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5,1))
p <- xyplot(Ozone~Wind, data=airquality)
print(p)
p
names(p)
mynames[myfull]
p[['formula']]
p[[x.limits]]
p[['x.limits']]
table(f)
xyplot(y~f, layout = c(2,1))
xyplot(y~f | f, layout = c(2,1))
xyplot(y~x | f, layout = c(2,1))
v1
v2
myedit('plot1.R')
pathtofile(plot1.R, local = TRUE)
pathtofile(`plot1.R'', local = TRUE)
pathtofile('plot1.R', local = TRUE)
pathtofile('plot1.R', local = TRUE)
source(pathtofile('plot1.R'), local = TRUE)
myedit('plot2.R')
source(pathtofile('plot2.R'), local = TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color, diamonds$cut)
myedit(myLabels.R)
myedit('myLabels.R')
source(pathtofile('myLabels.R'), local = TRUE)
xyplot(price ~ carat| color * cut, data = diamonds, strip = FALSE, pch = 20 xlab = myxlab, ylab= myylab, main = mymain)
?xyplot
xyplot(price ~ carat| color * cut, data = diamonds, strip = FALSE, pch = 20, xlab = myxlab, ylab= myylab, main = mymain)
xyplot(price ~ carat| color * cut, data = diamonds, pch = 20, xlab = myxlab, ylab= myylab, main = mymain)
sample(colors(),10)
pal <- c("red","blue")
pal <- colorRamp(c("red","blue"))
pal(0)
pal(1)
pal(seq(0,1,len=6))
p1 <- colorRampPalettte(c('red,blue'))
p1 <- colorRampPalettte(c('red','blue'))
p1 <- colorRampPalette(c('red','blue'))
p1(2)
p1(6)
0xcc
p2 <- colorRampPalette(c('red','yellow'))
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showme(p2(2))
showMe(p2(2))
p1
?rgb
p3 <- colorRampPalette(c('blue', 'green'))
p3 <- colorRampPalette(c('blue', 'green'), alpha=.5)
p3(5)
plot(x,y, pch = 19, col = rgb(0,.5,.5))
plot(x,y, pch = 19, col = rgb(0,.5,.5,.3))
cols <- brewer.pal(3,"BuGn")
cols
showMe(cols)
pal <- colorRampPalette(cols)
showMe(pal(20))
image(volcano, col = pal(20))
image(volcano, col = p1(20))
str(mpg)
qplot(displ, hwy, mpg)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, col = drv)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, color = drv, geom = c('point', 'smooth'))
qplot(hwy data =mpg, color = drv)
qplot(hwy, data =mpg, color = drv)
qplot(y = hwy, data =mpg, color = drv)
myhigh
qplot(drv, hwy, data = mpg, geom = 'boxplot')
qplot(drv, hwy, data = mpg, geom = 'boxplot', color = manufacturer)
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg, facets = .~drv)
qplot(hwy, data = mpg, facets = drv ~ . )
qplot(hwy, data = mpg, facets = drv ~ ., binwidth = 2 )
qplot(displ, hwy, data = mpg, geom = c('point','smooth'), facets = .~drv)
g <- ggplot(mpg, aes(displ, hwy))
g
summary(g)
g+geom_point()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth(method = 'lm')
g+geom_point()+geom_smooth(method = 'lm')+facet_grid(.~drv)
g+geom_point()+geom_smooth(method = 'lm')+facet_grid(.~drv)+ggtile('Swirl Rules!')
g+geom_point()+geom_smooth(method = 'lm')+facet_grid(.~drv)+ggtitle('Swirl Rules!')
g +geom_point(color = 'pink', size = 4, alpha = 1/2)
g +geom_point(size = 4, alpha = 1/2, aes(color = drv))
g +geom_point(size = 4, alpha = 1/2, aes(color = drv))+labs(title = 'Swirl Rules!') + labs(x= 'Displacement', y = 'Hwy Mileage')
g +geom_point(aes(color = drv))+labs(title = 'Swirl Rules!') + labs(x= 'Displacement', y = 'Hwy Mileage')
g+geom_point(aes(color = drv), size = 2, alpha =1/2) + geom_smooth(size=4, lty = 3, method = 'lm', se = FALSE)
g+geom_point(aes(color = drv), size = 2, alpha =1/2) + geom_smooth(size=4, linetype = 3, method = 'lm', se = FALSE)
g+geom_point(aes(color = drv)) + theme_bw(base_family = 'Times')
plot(myx, myy, type = 'l', ylim = c(-3,3))
g <- ggplot(testdat, aes(x=myx, y = myy))
g+geom_line()
g+geom_line()+ylim(-3,3)
g+geom_line()+coord_cartesian(ylim = c(-3,3))
g <- ggplot(data = mpg, aes(x=displ, y= hwy, color = factor(year)))
g+geom_point()
g+geom_point()+facet_grid(drv~cyl, margins=TRUE)
g+geom_point()+facet_grid(drv~cyl, margins=TRUE)+geom_smooth(method = 'lm', se =FALSE, size= 2, color = 'black')
g+geom_point()+facet_grid(drv~cyl, margins=TRUE)+geom_smooth(method = 'lm', se =FALSE, size= 2, color = 'black')+labs(x= 'Displacement', y = 'Highway Mileage', title= 'Swirl Rules!')
str(diamonds)
qtplot(price, data = diamonds)
qplot(price, data = diamonds)
range(diamonds$price)
range(diamonds$price, binwidth = 18497/30)
qplot(price, data = diamonds, binwidth = 18497/30)
brk
counts
qplot(price, data = diamonds, binwidth = 18497/30, fill=cut
qplot(price, data = diamonds, binwidth = 18497/30, fill=cut)
qplot(price, data=diamonds, geom='density')
qplot(price, data=diamonds, geom='density', color=cut)
qplot(carat, price, data=diamonds)
qplot(carat, price, data=diamonds, shape = cut)
qplot(carat, price, data=diamonds, color = cut)
qplot(carat, price, data=diamonds, color = cut, geom_smooth = 'lm')
qplot(carat, price, data=diamonds, color = cut, geom_smooth(method = 'lm'))
qplot(carat, price, data=diamonds, color = cut, geom_smooth(method = 'lm')
qplot(carat, price, data=diamonds, color = cut) + geom_smooth(method = 'lm')
qplot(carat, price, data=diamonds, color = cut, facets = .~cut) + geom_smooth(method = 'lm')
g<- ggplot(diamonds, aes(depth, price))
summary(g)
g+geom_point(alpha =1/3)
cutpoints <- quantile(diamonds$carat, seq(0,1,6), na.rm=TRUE)
cutpoints <- quantile(diamonds$carat, seq(0,1,4), na.rm=TRUE)
cutpoints <- quantile(diamonds$carat, seq(0,1,length = 4), na.rm=TRUE)
cutpoints
diamondscar2 <- ct(diamonds$carat, cutpoints)
diamondscar2 <- cut(diamonds$carat, cutpoints)
diamonds$car2 <- cut(diamonds$carat, cutpoints)
?cut
class(cutpoints)
names(cutpoints)
g <- ggplot(diamonds, aes(depth, price))
g + geom_point(alpha = 1/3) + facet_grid(cut ~ car2)
diamonds[myd,]
g + geom_point(method = 'lm',size=3, color= 'pink') + facet_grid(cut ~ car2)
g+geom_point(alpha=1/3)+facet_grid(cut~car2)+geom_smooth(method="lm",size=3,color="pink")
ggplot(diamonds, aes(carat, price)) + geom_boxplot() + facet_grid(.~cut)
?rm
ls()
rm(list=ls())
?kmeans
?stats
library(help = 'stats')
?heatmap
library(swirl)
swirl()
dist(dataFrame)
hc <- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
plot(as.dendrogram(hc), abline(h=1.5,col'blue'))
plot(as.dendrogram(hc), abline(h=1.5,col='blue'))
abline(h=1.5,col='blue')
abline(h=.4,col='red')
5
12
abline(h=.05,col='green')
dist(dFsm)
hc
heatmap(dataMatrix, col= cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
cmat
points(cx,cy,col=c('red','orange','purple'), pch=3, cex=2, lwd =2)
mdist(x,y,cx)
mdist(x,y,cx,cy)
apply(distTmp, 2, which.min)
points(x,y,pch=19, cex=2, col = cols1[newClust])
tapply(x,newClust, mean)
tapply(y,newClust, mean)
points(newCx, newCy, col = cols1, pch=8, cex=2, lwd=2)
mdist(x,y,newCx, newCy)
apply(distTmp2, 2,which.min)
points(x,y,pch=19,cex=2, col=cols1[newClust2])
tapply(x,newClust2,mean)
tapply(y,newClust2,mean)
points(finalCx,finalCy, col=cols1, pch=9, cex=2, lwd=2)
kmeans(dataFrame, centers=3)
kmObj$iter
plot(x,y,col = kmObj$cluster, pch=19, cex=2)
points(kmObj$centers, col=c('black', 'red', 'green'), pch=3,cex=3,lwd=3)
plot(x,y, col= kmeans(dataFrame,6)$cluster, pch=19,cex=2)
plot(x,y, col= kmeans(dataFrame,6)$cluster, pch=19,cex=2)
plot(x,y, col= kmeans(dataFrame,6)$cluster, pch=19,cex=2)
head(dataMatrix)
heatmap(dataMatrix)
myedit('addPatt.R)
myedit('addPatt.R')
source('addPatt.R', local=TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu %*% diag %*% t(matv)
svd(scale(mat))
prcomp(scale(mat))
svd1$v[1]
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd2$v[1:2,]
svd2$v[,1:2]
svd2$d
dim(faceData)
a1 <- (svd1$u[,1]) %*% t(svd1$v[,1])* (svd1$d[1])
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
myImage(a1)
a2 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
a2 <- (svd1$u[,1:2] * svd1$d[1:2]) %*% t(svd1$v[,1:2])
a2 <- (svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a2)
a2 <- svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5])
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]) )
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]) )
dim(ssd)
names(ssd)[562:563]
names(ssd[562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd, subject == 1)
dim(sub1)
names(sub1[1:12])
myedit('showXY.R')
showMe(1:6)
mdist <- dist(sub1[,1:3])
hclustering <- hclust(mdist)
myplclust(hclustering,lab.col= unclass(sub1$activity) )
mdist <- dist(sub1[,10:12])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
svd1 <- svd(scale(sub1[,-c(562,563)]))
svd1$u
dim(svd1$u)
maxCon <- which.max(svd1$v)
maxCon <- which.max(svd1$v[,2])
mdist <- dist(sub1[c(10:12, maxCon)])
mdist <- dist(sub1[c(10:12, maxCon)])
mdist <- dist(sub1[,c(10:12, maxCon)])
hclustering <- hclust(dist)
hclustering <- hclust(dist)
print(p)
p<- 1:10
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col=unclass(sub1$activity))
names(sub1[maxCon])
kClust <- kmeans(sub1[-(562:563)], centers= 6)
kClust <- kmeans(sub1[-c(562:563)], centers= 6)
kClust <- kmeans(sub1[,-c(562:563)], centers= 6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[,-c(562:563)], centers = 6, nstart=100)
table(kClust$cluster, sub1$activity)
dim(kClust$centers)
laying <- which(kClust$Size ==29)
laying <- which(kClust$size ==29)
plot(kCluster$centers[laying,1:12], pch=19, ylab = 'Laying Cluster')
plot(kClust$centers[laying,1:12], pch=19, ylab = 'Laying Cluster')
names(sub1[,1:3])
walkdown <- which(kClust$size=49)
walkdown <- which(kClust$size==49)
plot(kClust$centers[walkdown,1:12], pch=19, ylab= 'Walkdown Cluster')
install.packages('RColorBrewer')
install.packages('slidify')
install.packages('knitr')
install.packages('devtools')
install.packages('slidify')
install.packages('xtable')
setwd('Dropbox/R/Reproducible_Research/RepData_PeerAssessment1/')
list.files()
data <- read.csv('activity.csv')
head(data)
head(data,20)
sum(data$steps != NA)
class(data$steps)
data$steps[1] == NA
is.na(data$steps[1])
sum(is.na(data$steps))
library(ggplot2,dplyr,tidyr)
library(ggplot2,dplyr)
str(data)
?group_by
?group_by
library(dplyr)
?group_by
sum(data$steps, na.rm=T)
?select
data %>% select(!is.na(steps))
data %>% filter(!is.na(steps))
length(data %>% filter(!is.na(steps)))
dim(data %>% filter(!is.na(steps)))
length(data %>% filter(!is.na(steps))) %>% group_by(date) %>% summarise( totals=sum())
class(data$date)
?group_by
data %>% filter(!is.na(steps)) %>% group_by(date) %>% summarise( totals=sum())
data %>% filter(!is.na(steps)) %>% group_by(date) %>% summarise( totals=sum()) %>% select(totals)
data %>% filter(!is.na(steps)) %>% group_by(date) %>% summarise( totals=sum()) %>% select(totals) %>% mean()
totals <- data %>% filter(!is.na(steps)) %>% group_by(date) %>% summarise( totals=sum())
mean(totals$totals)
head(data)
totals <- data %>% filter(!is.na(steps)) %>% group_by(date) %>% summarise( totals=sum(steps))
head(totals)
totalstable <- data %>% filter(!is.na(steps)) %>% group_by(date) %>% summarise( totals=sum(steps))
mean(totalstable$totals)
data %>% filter(!is.na(steps)) %>% group_by(date) %>% summarise( totals=sum(steps)) %>% mean(totals)
totalstable <- data %>% filter(!is.na(steps)) %>% group_by(date) %>% summarise( totals=sum(steps))
mean(totalstable$totals)
rm(totals)
rm(totalstable)
library(ggplot2)
totalstable <- data %>% filter(!is.na(steps)) %>% group_by(date) %>% summarise( totals=sum(steps))
qplot(data=totalstable, totals, date)
qplot(data=totalstable, date, totals)
?hist
hist(totalstable$totals)
qplot(data=totalstable, totals)
hist(totalstable$totals)
qplot(data=totalstable, totals)
?qplot
qplot(data=totalstable, totals, ylab= 'Total number of steps per day')
qplot(data=totalstable, totals, y= 'Total number of steps per day')
qplot(data=totalstable, totals, x= 'Total number of steps per day')
qplot(data=totalstable, totals, xlab = 'Total number of steps per day')
?qplot
plot <- qplot(data=totalstable, totals, xlab = 'Total number of steps per day')
print(plot)
hist(totalstable$totals,xlab = 'Total number of steps per day')
?hist
hist(totalstable$totals,xlab = 'Total number of steps per day', breaks = 10)
hist(totalstable$totals,xlab = 'Total number of steps per day', breaks = 20)
hist(totalstable$totals,xlab = 'Total number of steps per day', breaks = 15)
hist(totalstable$totals,xlab = 'Total number of steps per day', breaks = 18)
hist(totalstable$totals,xlab = 'Total number of steps per day', breaks = 17)
hist(totalstable$totals,xlab = 'Total number of steps per day', breaks = 16)
hist(totalstable$totals,xlab = 'Total number of steps per day', breaks = 15)
hist(totalstable$totals,xlab = 'Total number of steps per day', breaks = 15, main = 'Histogram of steps per day')
?qplot
qplot(data=totalstable, totals, geom = 'histogram' xlab = 'Total number of steps per day')
qplot(data=totalstable, totals, geom = 'histogram', xlab = 'Total number of steps per day')
qplot(data=totalstable, totals, geom = 'histogram', xlab = 'Total number of steps per day', bins= 15)
qplot(data=totalstable, totals, geom = 'histogram', xlab = 'Total number of steps per day', bins= 18)
mean <- mean(totalstable$totals)
mean
print(mean)
head(data)
?qplot
max(totalstable)
max(totalstable$totals)
which.max(totals$totalstable)
which.max(totalstable$totals)
